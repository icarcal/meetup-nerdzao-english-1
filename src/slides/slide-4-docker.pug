section
  section
    h2.title Docker

  section
    h3.title Definition
    blockquote.fragment.
      Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud.

  section
    h3.title How to
    small.fragment While we’ll define concepts along the way, it is good for you to understand what Docker is and why you would use Docker before we begin.
    p
    small.fragment We also need to assume you are familiar with a few concepts before we continue:
      ul
        li IP Addresses and Ports
        li Virtual Machines
        li Editing configuration files
        li Basic familiarity with the ideas of code dependencies and building
        li Machine resource usage terms, like CPU percentages, RAM use in bytes, etc.

  section
    h3.title Images
    small.fragment A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.

  section
    h3.title Containers
    small.fragment Container images become containers at runtime and in the case of Docker containers - images become containers when they run on Docker Engine.
    p
    small.fragment Available for both Linux and Windows-based applications, containerized software will always run the same, regardless of the infrastructure.
    p
    small.fragment Containers isolate software from its environment and ensure that it works uniformly despite differences for instance between development and staging.

  section
    h3.title Container features
    small.fragment Standard: Docker created the industry standard for containers, so they could be portable anywhere
    p
    small.fragment Lightweight: Containers share the machine’s OS system kernel and therefore do not require an OS per application, driving higher server efficiencies and reducing server and licensing costs
    p
    small.fragment Secure: Applications are safer in containers and Docker provides the strongest default isolation capabilities in the industry

  section
    h3.title Docker vs VMs
    img(src="img/docker-vs-VM.png")

  section
    h3.title Volumes
    small.fragment Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.
    p
    small.fragment Volumes work on both Linux and Windows containers.
    p
    small.fragment Volume drivers let you store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.
    p
    small.fragment In addition, volumes are often a better choice than persisting data in a container’s writable layer, because a volume does not increase the size of the containers using it, and the volume’s contents exist outside the lifecycle of a given container.
